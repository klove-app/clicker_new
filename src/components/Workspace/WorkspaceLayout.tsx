import { useState, useEffect } from 'react'
import { type WorkspaceView, type ReconciliationRecord, type DetailedViewData } from '../../types/workspace'
import Sidebar from './Sidebar'
import Dashboard from './Dashboard'
import HistoryPage from './HistoryPage'
import DetailedView from './DetailedView'

// –ò–º–ø–æ—Ä—Ç—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
import StepByStepReconcile from '../StepByStepReconcile'

type Props = {}

export default function WorkspaceLayout({}: Props) {
  const [currentView, setCurrentView] = useState<WorkspaceView>('dashboard')
  const [detailedViewData, setDetailedViewData] = useState<DetailedViewData | null>(null)
  const [reconciliationHistory, setReconciliationHistory] = useState<ReconciliationRecord[]>([])

  useEffect(() => {
    loadHistory()
  }, [])

  const loadHistory = () => {
    try {
      const stored = localStorage.getItem('reconciliation_history')
      const data: ReconciliationRecord[] = stored ? JSON.parse(stored) : []
      setReconciliationHistory(data)
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏:', error)
    }
  }

  const handleViewChange = (view: WorkspaceView, data?: any) => {
    if (view === 'detailed-view' && data) {
      setDetailedViewData({
        record: data,
        fullResults: null, // –ë—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ localStorage –∏–ª–∏ API
        rawData: undefined
      })
    }
    setCurrentView(view)
  }

  const handleReconciliationComplete = (results: any, files: { file1: File; file2: File }) => {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
    const record: ReconciliationRecord = {
      id: crypto.randomUUID(),
      timestamp: new Date().toISOString(),
      files: {
        insurance: { name: files.file1.name, size: files.file1.size },
        actReport: { name: files.file2.name, size: files.file2.size }
      },
      results: {
        matches: results.matched?.length || 0,
        notFoundInAct: results.unmatched?.actReports?.length || 0,
        notFoundInInsurance: results.unmatched?.insurance?.length || 0,
        formulaErrors: 0,
        matchPercentage: Math.round(results.summary?.matchPercentage || 0)
      },
      status: 'completed',
      aiAnalysis: generateAIAnalysis(results)
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
    const updatedHistory = [...reconciliationHistory, record]
    localStorage.setItem('reconciliation_history', JSON.stringify(updatedHistory))
    setReconciliationHistory(updatedHistory)

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    localStorage.setItem(`reconciliation_${record.id}`, JSON.stringify(results))

    console.log('üíæ –°–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é:', record.id)
  }

  const generateAIAnalysis = (results: any): string => {
    const matchRate = (results.summary?.matchPercentage || 0) / 100
    
    if (matchRate > 0.9) return '–û—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å–≤–µ—Ä–∫–∏'
    if (matchRate > 0.8) return '–•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å–≤–µ—Ä–∫–∏'
    if (matchRate > 0.6) return '–°—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ - –µ—Å—Ç—å —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è'
    if (matchRate > 0.4) return '–ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ - –º–Ω–æ–≥–æ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π'
    return '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ - —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏'
  }

  const renderContent = () => {
    switch (currentView) {
      case 'dashboard':
        return <Dashboard onNavigate={handleViewChange} />
      
      case 'reconcile-bulk':
        return (
          <StepByStepReconcile 
            onComplete={handleReconciliationComplete}
            onBack={() => setCurrentView('dashboard')}
          />
        )
      
      case 'history':
        return (
          <HistoryPage 
            onViewDetails={(record) => {
              // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
              try {
                const fullResults = localStorage.getItem(`reconciliation_${record.id}`)
                setDetailedViewData({
                  record,
                  fullResults: fullResults ? JSON.parse(fullResults) : null
                })
                setCurrentView('detailed-view')
              } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error)
              }
            }}
          />
        )
      
      case 'detailed-view':
        return detailedViewData ? (
          <DetailedView 
            data={detailedViewData}
            onBack={() => setCurrentView('history')}
          />
        ) : (
          <div>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö</div>
        )
      
      case 'settings':
        return (
          <div style={{ padding: '24px' }}>
            <h1 style={{
              fontSize: '2rem',
              fontWeight: '800',
              background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
              WebkitBackgroundClip: 'text',
              WebkitTextFillColor: 'transparent',
              marginBottom: '24px'
            }}>
              ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏
            </h1>
            <div className="card">
              <p style={{ color: '#6b7280', textAlign: 'center', padding: '40px' }}>
                –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö
              </p>
            </div>
          </div>
        )
      
      default:
        return <Dashboard onNavigate={handleViewChange} />
    }
  }

  return (
    <div style={{
      display: 'flex',
      minHeight: '100vh',
      background: '#fafbfc'
    }}>
      <Sidebar 
        currentView={currentView}
        onViewChange={handleViewChange}
        reconciliationCount={reconciliationHistory.length}
      />
      
      <div style={{ 
        flex: 1,
        background: 'white',
        overflow: 'auto',
        minWidth: 0,
        maxWidth: 'calc(100vw - 240px)'
      }}>
        {renderContent()}
      </div>
    </div>
  )
}
