import { useState } from 'react'
import { readExcel } from '../lib/xlsx'
import { parseActReport, parseInsurance, performClaudeReconciliation } from '../lib/claude-parser'
import { exportClaudeResults } from '../lib/claude-excel-export'
import NotionTable from './NotionTable'
// import { logEvent } from '../lib/supabase' // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ - –∏—Å–ø–æ–ª—å–∑—É–µ–º localStorage

type Props = {
  onComplete?: (results: any, files: { file1: File; file2: File }) => void
}

export default function SingleReconcile({ onComplete }: Props) {
  const [upload1, setUpload1] = useState<File | null>(null)
  const [upload2, setUpload2] = useState<File | null>(null)
  const [status, setStatus] = useState<string>('')
  const [claudeResult, setClaudeResult] = useState<any | null>(null)

  const handleReconcile = async () => {
    if (!upload1 || !upload2) return
    
    setStatus('–ß—Ç–µ–Ω–∏–µ –∏ –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤...')
    try {
      const [f1, f2] = await Promise.all([readExcel(upload1), readExcel(upload2)])
      const left = f1[0]
      const right = f2[0]
      
      setStatus('–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–≤–µ—Ä–∫–∞ –ø–æ —Ç–æ—á–Ω–æ–º—É –∞–ª–≥–æ—Ä–∏—Ç–º—É –ö–ª–æ–¥–∞...')

      setTimeout(async () => {
        try {
          console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–æ—á–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –ö–ª–æ–¥–∞...')
          
          const insuranceData = await parseInsurance(left.data)
          const actReportData = await parseActReport(right.data)
          
          const claudeCmp = await performClaudeReconciliation(insuranceData, actReportData)
          setClaudeResult(claudeCmp)

          // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
          if (onComplete) {
            onComplete(claudeCmp, { file1: upload1, file2: upload2 })
          }

          // logEvent({ action: 'claude_compare_done', details: { // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ
          console.log('–°–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:', {
            matches: claudeCmp.matched?.length || 0,
            notFoundInAct: claudeCmp.unmatched?.actReports?.length || 0,
            notFoundInInsurance: claudeCmp.unmatched?.insurance?.length || 0,
            matchPercentage: claudeCmp.summary?.matchPercentage || 0
          })
          
          setStatus(`‚úÖ –°–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ù–∞–π–¥–µ–Ω–æ ${claudeCmp.matched?.length || 0} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π (${claudeCmp.summary?.matchPercentage || 0}%)`)
        } catch (error) {
          setStatus('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤–µ—Ä–∫–µ: ' + String(error))
          console.error(error)
        }
      }, 500)
      
    } catch (error) {
      setStatus('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤: ' + String(error))
      console.error(error)
    }
  }

  return (
    <div style={{ padding: '24px', width: '100%', maxWidth: 'none' }}>
      <h1 style={{
        fontSize: '32px',
        fontWeight: '700',
        color: '#1f2937',
        marginBottom: '8px'
      }}>
        –°–≤–µ—Ä–∫–∞ –æ–¥–Ω–æ–π –ø–∞—Ä—ã —Ñ–∞–π–ª–æ–≤
      </h1>
      <p style={{ color: '#6b7280', fontSize: '16px', margin: 0, marginBottom: '32px' }}>
        –ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–≤–∞ —Ñ–∞–π–ª–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–≤–µ—Ä–∫–∏ –ø–æ –∞–ª–≥–æ—Ä–∏—Ç–º—É –ö–ª–æ–¥–∞
      </p>

      <div className="card stack">
        <label style={{
          display: 'flex',
          flexDirection: 'column',
          gap: '8px',
          textAlign: 'left'
        }}>
          <span style={{ fontSize: '16px', fontWeight: '600', color: '#374151' }}>
            –í—ã–≥—Ä—É–∑–∫–∞ –ø–æ —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞–º
          </span>
          <input 
            type="file" 
            accept=".xlsx,.xls" 
            onChange={(e) => setUpload1(e.target.files?.[0] ?? null)}
            className="modern-input"
          />
          {upload1 && (
            <span style={{ color: '#16a34a', fontSize: '14px', fontWeight: '600' }}>
              ‚úì {upload1.name} ({Math.round(upload1.size / 1024)} KB)
            </span>
          )}
        </label>

        <label style={{
          display: 'flex',
          flexDirection: 'column',
          gap: '8px',
          textAlign: 'left'
        }}>
          <span style={{ fontSize: '16px', fontWeight: '600', color: '#374151' }}>
            –ê–∫—Ç-–æ—Ç—á–µ—Ç –æ–± –æ–∫–∞–∑–∞–Ω–∏–∏ —É—Å–ª—É–≥
          </span>
          <input 
            type="file" 
            accept=".xlsx,.xls" 
            onChange={(e) => setUpload2(e.target.files?.[0] ?? null)}
            className="modern-input"
          />
          {upload2 && (
            <span style={{ color: '#16a34a', fontSize: '14px', fontWeight: '600' }}>
              ‚úì {upload2.name} ({Math.round(upload2.size / 1024)} KB)
            </span>
          )}
        </label>
        
        <button
          className="modern-button"
          onClick={handleReconcile}
          disabled={!upload1 || !upload2}
          style={{
            marginTop: '16px',
            fontSize: '18px',
            padding: '16px 32px'
          }}
        >
          –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–≤–µ—Ä–∫—É
        </button>
        
        {status && (
          <div style={{
            padding: '12px 16px',
            background: status.includes('‚úÖ') ? '#f0fdf4' : '#f0f9ff',
            borderRadius: '8px',
            color: status.includes('‚úÖ') ? '#166534' : '#1e40af',
            fontSize: '14px',
            fontWeight: '600',
            textAlign: 'center'
          }}>
            {status}
          </div>
        )}
      </div>

      {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã */}
      {claudeResult && (
        <div style={{ marginTop: '32px' }}>
          <div className="summary">
            <h2 style={{ fontSize: '1.8rem', fontWeight: '700', marginBottom: '24px', color: '#374151' }}>
              üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–≤–µ—Ä–∫–∏
            </h2>
            <div className="stats-grid">
              <div className="stat-card">
                <div className="stat-number" style={{ color: '#0369a1' }}>
                  {claudeResult.matches.length}
                </div>
                <div className="stat-label">–ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π</div>
              </div>
              <div className="stat-card">
                <div className="stat-number" style={{ color: '#dc2626' }}>
                  {claudeResult.notFoundInAct.length}
                </div>
                <div className="stat-label">–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∞–∫—Ç–µ</div>
              </div>
              <div className="stat-card">
                <div className="stat-number" style={{ color: '#ea580c' }}>
                  {claudeResult.formulaErrors.length}
                </div>
                <div className="stat-label">–û—à–∏–±–∫–∏ —Ñ–æ—Ä–º—É–ª</div>
              </div>
              <div className="stat-card">
                <div className="stat-number" style={{ color: '#16a34a' }}>
                  {claudeResult.matches.length > 0 ? Math.round(claudeResult.matches.length / (claudeResult.matches.length + claudeResult.notFoundInAct.length) * 100) : 0}%
                </div>
                <div className="stat-label">–ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π</div>
              </div>
            </div>
            
            <div style={{ display: 'flex', gap: '12px', marginTop: '24px', justifyContent: 'center' }}>
              <button
                className="modern-button"
                onClick={() => exportClaudeResults(
                  claudeResult, 
                  { 
                    file1Name: upload1?.name || '–≤—ã–≥—Ä—É–∑–∫–∞', 
                    file2Name: upload2?.name || '–∞–∫—Ç-–æ—Ç—á–µ—Ç' 
                  }
                )}
              >
                üìä –°–∫–∞—á–∞—Ç—å Excel –æ—Ç—á—ë—Ç
              </button>
              
              <button
                className="modern-button"
                style={{ background: 'linear-gradient(135deg, #6366f1 0%, #8b5cf6 100%)' }}
                onClick={() => {
                  const blob = new Blob([JSON.stringify({
                    summary: {
                      matches: claudeResult.matches.length,
                      notFoundInAct: claudeResult.notFoundInAct.length,
                      notFoundInInsurance: claudeResult.notFoundInInsurance.length,
                      formulaErrors: claudeResult.formulaErrors.length
                    },
                    matches: claudeResult.matches,
                    notFoundInAct: claudeResult.notFoundInAct,
                    notFoundInInsurance: claudeResult.notFoundInInsurance,
                    formulaErrors: claudeResult.formulaErrors
                  }, null, 2)], { type: 'application/json' })
                  
                  const url = URL.createObjectURL(blob)
                  const a = document.createElement('a')
                  a.href = url
                  a.download = '—Å–≤–µ—Ä–∫–∞-–¥–∞–Ω–Ω—ã–µ.json'
                  a.click()
                  URL.revokeObjectURL(url)
                }}
              >
                üíæ –°–∫–∞—á–∞—Ç—å JSON
              </button>
            </div>
          </div>

          <div style={{ marginTop: '32px' }}>
            <NotionTable 
              data={claudeResult.matches}
              title="üìä –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è"
              subtitle={`–ü–æ–∫–∞–∑–∞–Ω—ã ${claudeResult.matches.length} –∑–∞–ø–∏—Å–µ–π —Å —Ç–æ—á–Ω—ã–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ–º —Å—É–º–º`}
              maxRows={25}
            />
          </div>
        </div>
      )}
    </div>
  )
}
