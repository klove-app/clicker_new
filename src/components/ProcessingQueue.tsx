import { useState, useEffect } from 'react'
import { type FilePair } from '../lib/bulk-processor'
import { readExcel } from '../lib/xlsx'
import { parseActReport, parseInsurance, performClaudeReconciliation } from '../lib/claude-parser'
import ResultsVisualization from './ResultsVisualization'

type ProcessingResult = {
  pair: FilePair
  result?: any
  error?: string
  status: 'pending' | 'processing' | 'completed' | 'error'
  aiAnalysis?: string
}

type Props = {
  pairs: FilePair[]
  onAllComplete: (results: ProcessingResult[]) => void
}

export default function ProcessingQueue({ pairs, onAllComplete }: Props) {
  const [results, setResults] = useState<ProcessingResult[]>([])
  const [currentIndex, setCurrentIndex] = useState(-1)
  const [isProcessing, setIsProcessing] = useState(false)

  useEffect(() => {
    if (pairs.length > 0) {
      setResults(pairs.map(pair => ({ pair, status: 'pending' as const })))
    }
  }, [pairs])

  const processAllPairs = async () => {
    console.log(`üöÄ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ${pairs.length} –ø–∞—Ä`)
    
    for (let index = 0; index < pairs.length; index++) {
      setCurrentIndex(index)
      const pair = pairs[index]
      
      console.log(`üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä—ã ${index + 1}/${pairs.length}:`, {
        insurance: pair.insurance.file.name,
        actReport: pair.actReport.file.name
      })

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–æ–±—Ä–∞–±–æ—Ç–∫–∞"
      setResults(prev => prev.map((r, i) => 
        i === index ? { ...r, status: 'processing' as const } : r
      ))

      try {
        // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª—ã
        const [f1, f2] = await Promise.all([
          readExcel(pair.insurance.file),
          readExcel(pair.actReport.file)
        ])

        const insuranceData = await parseInsurance(f1[0].data)
        const actReportData = await parseActReport(f2[0].data)
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º —Å–≤–µ—Ä–∫—É
        const claudeResult = await performClaudeReconciliation(actReportData, insuranceData)
        
        // –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è Claude API
        let aiAnalysis = ''
        const matchRate = (claudeResult.matched?.length || 0) / ((claudeResult.matched?.length || 0) + (claudeResult.unmatched?.actReports?.length || 0))
        
        if (matchRate < 0.5) {
          aiAnalysis = 'üö® –ù–∏–∑–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π - —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏'
        } else if (matchRate > 0.9) {
          aiAnalysis = '‚ö†Ô∏è –ú–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ –≤ —Ñ–æ—Ä–º—É–ª–∞—Ö - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞—Å—á–µ—Ç—ã'
        } else if (matchRate > 0.9) {
          aiAnalysis = '‚úÖ –û—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å–≤–µ—Ä–∫–∏'
        } else {
          aiAnalysis = 'üëç –•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å–≤–µ—Ä–∫–∏'
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        setResults(prev => prev.map((r, i) => 
          i === index ? { 
            ...r, 
            result: claudeResult, 
            status: 'completed' as const,
            aiAnalysis 
          } : r
        ))

        console.log(`‚úÖ –ü–∞—Ä–∞ ${index + 1} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ`)

      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∞—Ä—ã ${index + 1}:`, error)
        
        setResults(prev => prev.map((r, i) => 
          i === index ? { 
            ...r, 
            error: String(error), 
            status: 'error' as const 
          } : r
        ))
      }

      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞—Ä–∞–º–∏
      if (index < pairs.length - 1) {
        console.log(`‚è≥ –ü–∞—É–∑–∞ 1 —Å–µ–∫ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–∞—Ä–æ–π...`)
        await new Promise(resolve => setTimeout(resolve, 1000))
      }
    }

    // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    console.log(`üéâ –í—Å–µ ${pairs.length} –ø–∞—Ä –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!`)
    setIsProcessing(false)
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —á–µ—Ä–µ–∑ setTimeout —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å React warning
    setTimeout(() => {
      setResults(prevResults => {
        console.log('üìä –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:', prevResults)
        onAllComplete(prevResults)
        return prevResults
      })
    }, 100)
  }

  const startProcessing = () => {
    setIsProcessing(true)
    setCurrentIndex(-1)
    processAllPairs()
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'pending': return '#6b7280'
      case 'processing': return '#3b82f6'
      case 'completed': return '#16a34a'
      case 'error': return '#dc2626'
      default: return '#6b7280'
    }
  }

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'pending': return '‚è≥'
      case 'processing': return 'üîÑ'
      case 'completed': return '‚úÖ'
      case 'error': return '‚ùå'
      default: return '‚ùì'
    }
  }

  if (pairs.length === 0) return null

  return (
    <div className="card summary" style={{ marginTop: '20px', width: '100%', maxWidth: 'none' }}>
      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '20px' }}>
        <h3>‚ö° –û—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ ({pairs.length} –ø–∞—Ä)</h3>
        <button
          onClick={startProcessing}
          disabled={isProcessing}
          style={{
            background: isProcessing ? '#6b7280' : '#16a34a',
            color: 'white',
            padding: '10px 20px',
            borderRadius: '6px',
            border: 'none',
            cursor: isProcessing ? 'not-allowed' : 'pointer',
            fontSize: '16px',
            fontWeight: 'bold'
          }}
        >
          {isProcessing ? 'üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞...' : 'üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–∞—Å—Å–æ–≤—É—é —Å–≤–µ—Ä–∫—É'}
        </button>
      </div>

      {/* –ü—Ä–æ–≥—Ä–µ—Å—Å */}
      {isProcessing && (
        <div style={{ marginBottom: '20px' }}>
          <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '8px' }}>
            <span>–ü—Ä–æ–≥—Ä–µ—Å—Å: {currentIndex + 1} –∏–∑ {pairs.length}</span>
            <span>{Math.round((currentIndex + 1) / pairs.length * 100)}%</span>
          </div>
          <div style={{ 
            width: '100%', 
            height: '8px', 
            background: '#e5e7eb', 
            borderRadius: '4px',
            overflow: 'hidden'
          }}>
            <div style={{
              width: `${(currentIndex + 1) / pairs.length * 100}%`,
              height: '100%',
              background: '#16a34a',
              transition: 'width 0.3s'
            }} />
          </div>
        </div>
      )}

      {/* –°–ø–∏—Å–æ–∫ –ø–∞—Ä —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ */}
      <div style={{ maxHeight: '400px', overflowY: 'auto' }}>
        {results.map((result, idx) => (
          <div key={idx} style={{
            padding: '12px',
            background: currentIndex === idx ? '#f0f9ff' : '#f9fafb',
            borderRadius: '6px',
            marginBottom: '8px',
            border: `2px solid ${currentIndex === idx ? '#3b82f6' : '#e5e7eb'}`
          }}>
            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start' }}>
              <div style={{ flex: 1 }}>
                <div style={{ 
                  display: 'flex', 
                  alignItems: 'center', 
                  marginBottom: '8px',
                  fontSize: '16px',
                  fontWeight: 'bold'
                }}>
                  <span style={{ marginRight: '8px', fontSize: '20px' }}>
                    {getStatusIcon(result.status)}
                  </span>
                  –ü–∞—Ä–∞ #{idx + 1}
                </div>
                
                <div style={{ fontSize: '14px', marginBottom: '4px' }}>
                  üìä {result.pair.insurance.file.name}
                </div>
                <div style={{ fontSize: '14px', marginBottom: '8px' }}>
                  üìã {result.pair.actReport.file.name}
                </div>

                {result.result && (
                  <ResultsVisualization 
                    results={result.result}
                    files={{
                      insurance: result.pair.insurance.file.name,
                      actReport: result.pair.actReport.file.name
                    }}
                    pairIndex={idx + 1}
                  />
                )}

                {result.aiAnalysis && (
                  <div style={{ 
                    fontSize: '12px', 
                    color: '#6366f1',
                    background: '#f0f9ff',
                    padding: '4px 8px',
                    borderRadius: '4px',
                    marginTop: '8px'
                  }}>
                    ü§ñ AI: {result.aiAnalysis}
                  </div>
                )}

                {result.error && (
                  <div style={{ fontSize: '14px', color: '#dc2626' }}>
                    ‚ùå –û—à–∏–±–∫–∞: {result.error}
                  </div>
                )}
              </div>

              <div style={{
                padding: '4px 12px',
                borderRadius: '20px',
                background: getStatusColor(result.status),
                color: 'white',
                fontSize: '12px',
                fontWeight: 'bold',
                textAlign: 'center',
                minWidth: '80px'
              }}>
                {result.status === 'pending' && '–û–∂–∏–¥–∞–µ—Ç'}
                {result.status === 'processing' && '–û–±—Ä–∞–±–æ—Ç–∫–∞'}
                {result.status === 'completed' && '–ì–æ—Ç–æ–≤–æ'}
                {result.status === 'error' && '–û—à–∏–±–∫–∞'}
              </div>

            </div>
          </div>
        ))}
      </div>

      {/* –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      {results.length > 0 && results.every(r => r.status === 'completed' || r.status === 'error') && (
        <div style={{ 
          marginTop: '20px', 
          padding: '16px', 
          background: '#f0fdf4', 
          borderRadius: '8px',
          border: '1px solid #bbf7d0'
        }}>
          <h4 style={{ color: '#16a34a', marginBottom: '12px' }}>üéâ –ú–∞—Å—Å–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</h4>
          <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr 1fr', gap: '12px', fontSize: '14px' }}>
            <div>‚úÖ –£—Å–ø–µ—à–Ω–æ: {results.filter(r => r.status === 'completed').length}</div>
            <div>‚ùå –û—à–∏–±–∫–∏: {results.filter(r => r.status === 'error').length}</div>
            <div>üìä –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ Excel: {results.filter(r => r.status === 'completed').length}</div>
          </div>
        </div>
      )}
    </div>
  )
}
