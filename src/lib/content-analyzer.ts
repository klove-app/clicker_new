// –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–º–Ω–æ–≥–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è

import { readExcel } from './xlsx'

export type FileContentInfo = {
  fileName: string
  recordCount: number
  dateRange: { start: Date | null; end: Date | null }
  amountRange: { min: number; max: number; avg: number }
  keyColumns: string[]
  sampleData: any[]
  contentSignature: string
}

// –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞
export async function analyzeFileContent(file: File): Promise<FileContentInfo> {
  try {
    const sheets = await readExcel(file)
    const sheet = sheets[0] // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç
    
    if (!sheet || sheet.rows.length === 0) {
      throw new Error('–ü—É—Å—Ç–æ–π —Ñ–∞–π–ª –∏–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
    }

    console.log(`üîç –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞ "${file.name}":`, {
      headers: sheet.headers,
      rowCount: sheet.rows.length
    })

    // –ü–æ–∏—Å–∫ –∫–æ–ª–æ–Ω–æ–∫ —Å –¥–∞—Ç–∞–º–∏
    const dateColumns = sheet.headers.filter(h => 
      h.toLowerCase().includes('date') || 
      h.toLowerCase().includes('–¥–∞—Ç–∞') ||
      h.toLowerCase().includes('created') ||
      h.toLowerCase().includes('start') ||
      h.toLowerCase().includes('finish')
    )

    // –ü–æ–∏—Å–∫ –∫–æ–ª–æ–Ω–æ–∫ —Å —Å—É–º–º–∞–º–∏
    const amountColumns = sheet.headers.filter(h => 
      h.toLowerCase().includes('amount') || 
      h.toLowerCase().includes('—Å—É–º–º–∞') ||
      h.toLowerCase().includes('–ø—Ä–µ–º–∏—è') ||
      h.toLowerCase().includes('commission') ||
      h.toLowerCase().includes('sum')
    )

    // –ê–Ω–∞–ª–∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç
    let dateRange = { start: null as Date | null, end: null as Date | null }
    if (dateColumns.length > 0) {
      const dates = sheet.rows
        .map(row => row[dateColumns[0]])
        .filter(date => date)
        .map(date => new Date(String(date)))
        .filter(date => !isNaN(date.getTime()))
        .sort((a, b) => a.getTime() - b.getTime())
      
      if (dates.length > 0) {
        dateRange = { start: dates[0], end: dates[dates.length - 1] }
      }
    }

    // –ê–Ω–∞–ª–∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Å—É–º–º
    let amountRange = { min: 0, max: 0, avg: 0 }
    if (amountColumns.length > 0) {
      const amounts = sheet.rows
        .map(row => Number(row[amountColumns[0]]) || 0)
        .filter(amount => amount > 0)
      
      if (amounts.length > 0) {
        amountRange = {
          min: Math.min(...amounts),
          max: Math.max(...amounts),
          avg: amounts.reduce((a, b) => a + b, 0) / amounts.length
        }
      }
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ "–ø–æ–¥–ø–∏—Å–∏" —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    const contentSignature = [
      sheet.headers.slice(0, 5).join('|'),
      `rows:${sheet.rows.length}`,
      `amounts:${amountRange.min}-${amountRange.max}`,
      dateRange.start ? `date:${dateRange.start.getFullYear()}-${dateRange.start.getMonth() + 1}` : ''
    ].filter(Boolean).join('::')

    const result: FileContentInfo = {
      fileName: file.name,
      recordCount: sheet.rows.length,
      dateRange,
      amountRange,
      keyColumns: [...dateColumns, ...amountColumns],
      sampleData: sheet.rows.slice(0, 3),
      contentSignature
    }

    console.log(`üìä –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ "${file.name}":`, result)
    return result

  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ "${file.name}":`, error)
    throw error
  }
}

// –£–º–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
export function matchFilesByContent(
  insuranceContents: FileContentInfo[],
  actReportContents: FileContentInfo[]
): Array<{
  insurance: FileContentInfo
  actReport: FileContentInfo
  confidence: number
  reasons: string[]
}> {
  const matches: Array<{
    insurance: FileContentInfo
    actReport: FileContentInfo
    confidence: number
    reasons: string[]
  }> = []

  const usedInsurance = new Set<number>()
  const usedActReports = new Set<number>()

  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–∞—Ä—ã –∏ –≤—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–µ
  const allPossiblePairs: Array<{
    insIndex: number
    actIndex: number
    confidence: number
    reasons: string[]
  }> = []

  for (let i = 0; i < insuranceContents.length; i++) {
    for (let j = 0; j < actReportContents.length; j++) {
      const ins = insuranceContents[i]
      const act = actReportContents[j]
      
      let confidence = 0
      const reasons: string[] = []

      // 1. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É –¥–∞—Ç
      if (ins.dateRange.start && act.dateRange.start) {
        const monthDiff = Math.abs(
          (ins.dateRange.start.getFullYear() * 12 + ins.dateRange.start.getMonth()) -
          (act.dateRange.start.getFullYear() * 12 + act.dateRange.start.getMonth())
        )
        
        if (monthDiff === 0) {
          confidence += 0.4
          reasons.push('–¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞')
        } else if (monthDiff <= 1) {
          confidence += 0.2
          reasons.push('–ë–ª–∏–∑–∫–∏–π –ø–µ—Ä–∏–æ–¥ (¬±1 –º–µ—Å—è—Ü)')
        }
      }

      // 2. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–ø–∏—Å–µ–π (–£–°–ò–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê)
      const recordRatio = Math.min(ins.recordCount, act.recordCount) / Math.max(ins.recordCount, act.recordCount)
      if (recordRatio > 0.8) {
        confidence += 0.4 // –£–≤–µ–ª–∏—á–∏–ª —Å 0.2 –¥–æ 0.4
        reasons.push(`–û—á–µ–Ω—å –ø–æ—Ö–æ–∂–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π (${ins.recordCount} vs ${act.recordCount})`)
      } else if (recordRatio > 0.6) {
        confidence += 0.3
        reasons.push(`–ü–æ—Ö–æ–∂–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π (${ins.recordCount} vs ${act.recordCount})`)
      } else if (recordRatio > 0.4) {
        confidence += 0.1
        reasons.push(`–ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ –ø–æ—Ö–æ–∂–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π (${ins.recordCount} vs ${act.recordCount})`)
      }

      // 3. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É —Å—É–º–º
      if (ins.amountRange.avg > 0 && act.amountRange.avg > 0) {
        const amountRatio = Math.min(ins.amountRange.avg, act.amountRange.avg) / Math.max(ins.amountRange.avg, act.amountRange.avg)
        if (amountRatio > 0.5) {
          confidence += 0.2
          reasons.push(`–ü–æ—Ö–æ–∂–∏–µ —Å—É–º–º—ã (${Math.round(ins.amountRange.avg)} vs ${Math.round(act.amountRange.avg)})`)
        }
      }

      // 4. –ê–Ω–∞–ª–∏–∑ –Ω–∞–∑–≤–∞–Ω–∏–π —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å—Ö–æ–∂–µ—Å—Ç—å (–£–°–ò–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê)
      const insName = ins.fileName.toLowerCase()
      const actName = act.fileName.toLowerCase()
      
      // –ò—â–µ–º –æ–±—â–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
      const insWords = insName.split(/[-_\s\.]+/).filter(w => w.length > 2)
      const actWords = actName.split(/[-_\s\.]+/).filter(w => w.length > 2)
      const commonWords = insWords.filter(w => actWords.some((aw: string) => aw.includes(w) || w.includes(aw)))
      
      if (commonWords.length > 0) {
        // –ï—Å–ª–∏ –µ—Å—Ç—å –æ–±—â–∏–µ —Å–ª–æ–≤–∞ + –ø–æ—Ö–æ–∂–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π = –≤—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        const nameBonus = recordRatio > 0.5 ? 0.4 : 0.2
        confidence += Math.min(nameBonus, commonWords.length * 0.1)
        reasons.push(`–û–±—â–∏–µ —Å–ª–æ–≤–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏: ${commonWords.slice(0, 3).join(', ')}`)
      }

      // 5. –ê–Ω–∞–ª–∏–∑ –Ω–æ–º–µ—Ä–æ–≤ –¥–æ–≥–æ–≤–æ—Ä–æ–≤/–¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
      const insNumbers: string[] = insName.match(/\d{4,}/g) || []
      const actNumbers: string[] = actName.match(/\d{4,}/g) || []
      const commonNumbers = insNumbers.filter(n => actNumbers.includes(n))
      
      if (commonNumbers.length > 0) {
        confidence += 0.3
        reasons.push(`–û–±—â–∏–µ –Ω–æ–º–µ—Ä–∞: ${commonNumbers.join(', ')}`)
      }

      // –ë–û–ù–£–° –ó–ê –ö–û–ú–ë–ò–ù–ê–¶–ò–Æ –§–ê–ö–¢–û–†–û–í
      if (recordRatio > 0.6 && commonWords.length > 0) {
        confidence += 0.3 // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –±–æ–Ω—É—Å –∑–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏—é
        reasons.push(`üéØ –í—ã—Å–æ–∫–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π + –Ω–∞–∑–≤–∞–Ω–∏–µ`)
      }

      // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ (–º–∞–∫—Å–∏–º—É–º 95%)
      confidence = Math.min(confidence, 0.95)

      if (confidence > 0.1) { // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—å –∫–∞–∫–∞—è-—Ç–æ —Å–≤—è–∑—å
        allPossiblePairs.push({
          insIndex: i,
          actIndex: j,
          confidence,
          reasons
        })
      }
    }
  }

  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –≤—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–µ –ø–∞—Ä—ã –±–µ–∑ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π
  allPossiblePairs.sort((a, b) => b.confidence - a.confidence)

  for (const pair of allPossiblePairs) {
    if (!usedInsurance.has(pair.insIndex) && !usedActReports.has(pair.actIndex)) {
      matches.push({
        insurance: insuranceContents[pair.insIndex],
        actReport: actReportContents[pair.actIndex],
        confidence: pair.confidence,
        reasons: pair.reasons
      })
      
      usedInsurance.add(pair.insIndex)
      usedActReports.add(pair.actIndex)
    }
  }

  console.log('üß† –£–º–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É:', matches.map(m => ({
    insurance: m.insurance.fileName,
    actReport: m.actReport.fileName,
    confidence: Math.round(m.confidence * 100) / 100,
    reasons: m.reasons
  })))

  return matches
}
