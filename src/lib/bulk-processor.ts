// –ú–∞—Å—Å–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞—Ä

export type FileInfo = {
  file: File
  type: 'insurance' | 'act-report' | 'unknown'
  confidence: number
  metadata?: {
    month?: string
    year?: string
    period?: string
    contractNumber?: string
  }
}

export type FilePair = {
  insurance: FileInfo
  actReport: FileInfo
  confidence: number
  reason: string
}

// –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
export function analyzeFileType(file: File): FileInfo {
  const name = file.name.toLowerCase()
  
  let type: 'insurance' | 'act-report' | 'unknown' = 'unknown'
  let confidence = 0
  const metadata: FileInfo['metadata'] = {}

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
  if (name.includes('–≤—ã–≥—Ä—É–∑–∫–∞') || name.includes('—Å—Ç—Ä–∞—Ö–æ–≤') || name.includes('insurance')) {
    type = 'insurance'
    confidence += 0.7
  }
  
  if (name.includes('–∞–∫—Ç') || name.includes('–æ—Ç—á–µ—Ç') || name.includes('–æ—Ç—á—ë—Ç') || name.includes('act')) {
    type = 'act-report'
    confidence += 0.7
  }

  // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
  const monthMap: Record<string, string> = {
    '—è–Ω–≤': '—è–Ω–≤–∞—Ä—å', '—Ñ–µ–≤': '—Ñ–µ–≤—Ä–∞–ª—å', '–º–∞—Ä': '–º–∞—Ä—Ç', '–∞–ø—Ä': '–∞–ø—Ä–µ–ª—å',
    '–º–∞–π': '–º–∞–π', '–∏—é–Ω': '–∏—é–Ω—å', '–∏—é–ª': '–∏—é–ª—å', '–∞–≤–≥': '–∞–≤–≥—É—Å—Ç',
    '—Å–µ–Ω': '—Å–µ–Ω—Ç—è–±—Ä—å', '–æ–∫—Ç': '–æ–∫—Ç—è–±—Ä—å', '–Ω–æ—è': '–Ω–æ—è–±—Ä—å', '–¥–µ–∫': '–¥–µ–∫–∞–±—Ä—å',
    'january': '—è–Ω–≤–∞—Ä—å', 'february': '—Ñ–µ–≤—Ä–∞–ª—å', 'march': '–º–∞—Ä—Ç', 'april': '–∞–ø—Ä–µ–ª—å',
    'may': '–º–∞–π', 'june': '–∏—é–Ω—å', 'july': '–∏—é–ª—å', 'august': '–∞–≤–≥—É—Å—Ç',
    'september': '—Å–µ–Ω—Ç—è–±—Ä—å', 'october': '–æ–∫—Ç—è–±—Ä—å', 'november': '–Ω–æ—è–±—Ä—å', 'december': '–¥–µ–∫–∞–±—Ä—å'
  }

  // –ò—â–µ–º –º–µ—Å—è—Ü—ã –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
  for (const [pattern, normalized] of Object.entries(monthMap)) {
    if (name.includes(pattern)) {
      metadata.month = normalized
      confidence += 0.15
      break
    }
  }

  // –ò—â–µ–º —á–∏—Å–ª–æ–≤—ã–µ –º–µ—Å—è—Ü—ã (01, 02, ... 12)
  const numericMonth = name.match(/[-_\s](\d{2})[-_\s]/)?.[1]
  if (numericMonth && parseInt(numericMonth) >= 1 && parseInt(numericMonth) <= 12) {
    const months = ['', '—è–Ω–≤–∞—Ä—å', '—Ñ–µ–≤—Ä–∞–ª—å', '–º–∞—Ä—Ç', '–∞–ø—Ä–µ–ª—å', '–º–∞–π', '–∏—é–Ω—å', 
                   '–∏—é–ª—å', '–∞–≤–≥—É—Å—Ç', '—Å–µ–Ω—Ç—è–±—Ä—å', '–æ–∫—Ç—è–±—Ä—å', '–Ω–æ—è–±—Ä—å', '–¥–µ–∫–∞–±—Ä—å']
    metadata.month = months[parseInt(numericMonth)]
    confidence += 0.15
  }

  // –ò—â–µ–º –≥–æ–¥
  const yearMatches = name.match(/20\d{2}/)
  if (yearMatches) {
    metadata.year = yearMatches[0]
    confidence += 0.1
  }

  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞—Ç –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è (DD.MM.YYYY, DD-MM-YYYY)
  const dateMatches = name.match(/(\d{1,2})[-.\s](\d{1,2})[-.\s](20\d{2})/)
  if (dateMatches) {
    const [, day, month, year] = dateMatches
    metadata.period = `${day}.${month}.${year}`
    metadata.year = year
    confidence += 0.2
  }

  // –ü–æ–∏—Å–∫ –Ω–æ–º–µ—Ä–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤/–¥–æ–≥–æ–≤–æ—Ä–æ–≤
  const contractMatches = name.match(/(25-\d{4}|‚Ññ\s*\d+|–¥–æ–≥–æ–≤–æ—Ä\s*\d+)/i)
  if (contractMatches) {
    metadata.contractNumber = contractMatches[1]
    confidence += 0.1
  }

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è —Å—Ç—Ä–∞—Ö–æ–≤–æ–∫
  if (name.includes('b2b') || name.includes('commission') || name.includes('–ø–æ–ª–∏—Å') || name.includes('policy')) {
    if (type === 'unknown') type = 'insurance'
    confidence += 0.2
  }

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è –∞–∫—Ç–æ–≤
  if (name.includes('–∞–≥–µ–Ω—Ç') || name.includes('—É—Å–ª—É–≥') || name.includes('–≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ') || name.includes('–æ–∫–∞–∑–∞–Ω')) {
    if (type === 'unknown') type = 'act-report'
    confidence += 0.2
  }

  // –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
  const nameParts = file.name.split(/[-_\s\.]+/).filter(part => part.length > 2)
  for (const part of nameParts) {
    const partLower = part.toLowerCase()
    if (partLower.includes('—Å—Ç—Ä–∞—Ö') || partLower.includes('insur')) {
      if (type === 'unknown') type = 'insurance'
      confidence += 0.1
    }
    if (partLower.includes('–∞–∫—Ç') || partLower.includes('–æ—Ç—á–µ—Ç')) {
      if (type === 'unknown') type = 'act-report'  
      confidence += 0.1
    }
  }

  console.log(`üìÅ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ "${file.name}":`, { 
    type, 
    confidence: Math.round(confidence * 100) / 100, 
    metadata,
    nameParts 
  })

  return { file, type, confidence: Math.min(confidence, 1), metadata }
}

// –£–º–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä —Ñ–∞–π–ª–æ–≤ 1:1 (–±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)
export function createFilePairs(files: FileInfo[]): FilePair[] {
  const insuranceFiles = files.filter(f => f.type === 'insurance')
  const actReportFiles = files.filter(f => f.type === 'act-report')
  
  console.log('üìä –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤:', {
    insurance: insuranceFiles.length,
    actReports: actReportFiles.length,
    unknown: files.filter(f => f.type === 'unknown').length
  })

  const pairs: FilePair[] = []
  const usedInsurance = new Set<number>()
  const usedActReports = new Set<number>()

  // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –ø–µ—Ä–∏–æ–¥—É (1:1)
  for (let i = 0; i < insuranceFiles.length; i++) {
    if (usedInsurance.has(i)) continue
    
    const ins = insuranceFiles[i]
    let bestMatch: { index: number; confidence: number; reason: string } | null = null

    for (let j = 0; j < actReportFiles.length; j++) {
      if (usedActReports.has(j)) continue
      
      const act = actReportFiles[j]
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –ø–µ—Ä–∏–æ–¥—É
      if (ins.metadata?.month && act.metadata?.month && 
          ins.metadata.month === act.metadata.month &&
          ins.metadata?.year === act.metadata?.year) {
        bestMatch = {
          index: j,
          confidence: 0.9,
          reason: `–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –ø–µ—Ä–∏–æ–¥—É: ${ins.metadata.month} ${ins.metadata.year}`
        }
        break // –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
      }
    }

    if (bestMatch) {
      pairs.push({
        insurance: ins,
        actReport: actReportFiles[bestMatch.index],
        confidence: bestMatch.confidence,
        reason: bestMatch.reason
      })
      usedInsurance.add(i)
      usedActReports.add(bestMatch.index)
    }
  }

  // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: –ü–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è –¥–ª—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Ñ–∞–π–ª–æ–≤
  for (let i = 0; i < insuranceFiles.length; i++) {
    if (usedInsurance.has(i)) continue
    
    const ins = insuranceFiles[i]
    let bestMatch: { index: number; confidence: number; reason: string } | null = null

    for (let j = 0; j < actReportFiles.length; j++) {
      if (usedActReports.has(j)) continue
      
      const act = actReportFiles[j]
      const timeDiff = Math.abs(ins.file.lastModified - act.file.lastModified)
      const daysDiff = timeDiff / (1000 * 60 * 60 * 24)
      
      if (daysDiff < 30) {
        const confidence = Math.max(0.3, 0.8 - daysDiff / 30)
        if (!bestMatch || confidence > bestMatch.confidence) {
          bestMatch = {
            index: j,
            confidence,
            reason: `–ë–ª–∏–∑–∫–∏–µ –¥–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è (—Ä–∞–∑–Ω–∏—Ü–∞ ${Math.round(daysDiff)} –¥–Ω–µ–π)`
          }
        }
      }
    }

    if (bestMatch) {
      pairs.push({
        insurance: ins,
        actReport: actReportFiles[bestMatch.index],
        confidence: bestMatch.confidence,
        reason: bestMatch.reason
      })
      usedInsurance.add(i)
      usedActReports.add(bestMatch.index)
    }
  }

  // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 3: –ü—Ä–æ—Å—Ç–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è
  for (let i = 0; i < insuranceFiles.length; i++) {
    if (usedInsurance.has(i)) continue
    
    for (let j = 0; j < actReportFiles.length; j++) {
      if (usedActReports.has(j)) continue
      
      pairs.push({
        insurance: insuranceFiles[i],
        actReport: actReportFiles[j],
        confidence: 0.2,
        reason: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Ñ–∞–π–ª–æ–≤'
      })
      usedInsurance.add(i)
      usedActReports.add(j)
      break // –¢–æ–ª—å–∫–æ –æ–¥–Ω–∞ –ø–∞—Ä–∞ –Ω–∞ —Ñ–∞–π–ª
    }
  }

  console.log('üîó –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä—ã —Ñ–∞–π–ª–æ–≤ (1:1):', pairs.map(p => ({
    insurance: p.insurance.file.name,
    actReport: p.actReport.file.name,
    confidence: p.confidence,
    reason: p.reason
  })))

  return pairs
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –ø–∞—Ä —Ñ–∞–π–ª–æ–≤
export async function processBulkFiles(
  pairs: FilePair[],
  onProgress: (current: number, total: number, currentPair: FilePair) => void,
  onPairComplete: (pair: FilePair, result: any) => void,
  onError: (pair: FilePair, error: string) => void
) {
  console.log(`üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∞—Å—Å–æ–≤—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É ${pairs.length} –ø–∞—Ä —Ñ–∞–π–ª–æ–≤...`)

  for (let i = 0; i < pairs.length; i++) {
    const pair = pairs[i]
    
    try {
      onProgress(i + 1, pairs.length, pair)
      
      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ª–æ–≥–∏–∫–∏ —Å–≤–µ—Ä–∫–∏
      // –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞
      await new Promise(resolve => setTimeout(resolve, 1000))
      
      const mockResult = {
        matches: Math.floor(Math.random() * 70),
        notFoundInAct: Math.floor(Math.random() * 10),
        confidence: pair.confidence
      }
      
      onPairComplete(pair, mockResult)
      
    } catch (error) {
      onError(pair, String(error))
    }
  }
  
  console.log('‚úÖ –ú–∞—Å—Å–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')
}

// –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –¥–ª—è Claude API
export function identifyComplexCases(results: any[]): {
  case: string
  description: string
  data: any
  priority: 'high' | 'medium' | 'low'
}[] {
  const complexCases = []

  // –°–ª—É—á–∞–π 1: –ú–Ω–æ–≥–æ –Ω–µ—Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
  for (const result of results) {
    const unmatchedRatio = result.notFoundInAct / (result.matches + result.notFoundInAct)
    if (unmatchedRatio > 0.3) {
      complexCases.push({
        case: 'high_unmatched_ratio',
        description: `–í—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –Ω–µ—Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: ${Math.round(unmatchedRatio * 100)}%`,
        data: result,
        priority: 'high' as const
      })
    }
  }

  // –°–ª—É—á–∞–π 2: –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å—É–º–º—ã
  for (const result of results) {
    if (result.matches && result.matches.some((m: any) => m.amountDiff > 100)) {
      complexCases.push({
        case: 'large_amount_differences',
        description: '–ù–∞–π–¥–µ–Ω—ã –±–æ–ª—å—à–∏–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è –≤ —Å—É–º–º–∞—Ö',
        data: result,
        priority: 'medium' as const
      })
    }
  }

  // –°–ª—É—á–∞–π 3: –ú–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ –≤ —Ñ–æ—Ä–º—É–ª–∞—Ö
  for (const result of results) {
    if (result.formulaErrors && result.formulaErrors.length > result.matches * 0.2) {
      complexCases.push({
        case: 'formula_errors',
        description: '–ú–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ –≤ —Ñ–æ—Ä–º—É–ª–∞—Ö —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–º–∏—Å—Å–∏–∏',
        data: result,
        priority: 'medium' as const
      })
    }
  }

  return complexCases.sort((a, b) => {
    const priorityOrder = { high: 3, medium: 2, low: 1 }
    return priorityOrder[b.priority] - priorityOrder[a.priority]
  })
}
